+ flesh out `/questions/:question_id`:
  + The application shows a 404 page if that poll does not exist. (Please keep in mind that new polls will not be accessible at their url because of the way the backend is set up in this application.)

  + Does the voting mechanism work correctly?
  + Upon voting in a poll, all of the information of the answered poll is displayed.
  + The user’s response is recorded and is clearly visible on the poll details page.
  + When the user comes back to the home page, the polling question appears in the “Answered” column.
  + The voting mechanism works correctly, and the data on the leaderboard changes appropriately.

+ flesh out `/add`
  + The form is available at /add.
  + The application shows the text “Would You Rather” and has a form for creating two options.
  + Upon submitting the form, a new poll is created and the user is taken to the home page.
  + The new polling question appears in the correct category on the home page.

+ flesh out `/leaderboard`
  + Each entry on the leaderboard contains the following:
    - the user’s name;
    - the user’s picture;
    - the number of questions the user asked; and
    - the number of questions the user answered.
  + Users are ordered in descending order based on the sum of the number of questions they’ve answered and the number of questions they’ve asked.

  


## Finishing touches
+ Check README and package.json.

-----

+ Is the application navigable?
+ Does the application interact with the backend correctly?
+ The data that’s initially displayed is populated correctly from the backend.
+ Each user’s answer and each new poll is correctly recorded on the backend.
+ Is the code formatted properly?
+ All code is formatted properly and is functional.

## Architecture

+ Does the store serve as the application’s single source of truth?
+ The store is the application’s source of truth.
+ Components read the necessary state from the store; they do not have their own versions of the same state.
+ There are no direct API calls in the components' lifecycle methods.
+ Is application state managed by Redux?
+ Most application state is managed by the Redux store. State-based props are mapped from the store rather than stored as component state.
+ Form inputs and controlled components may have some state handled by the component.
+ Does application state update correctly?
+ Updates are triggered by dispatching action creators to reducers.
+ Reducers and actions are written properly and correctly return updated state to the store.
+ Does the architecture of the application make sense?
+ The code is structured and organized in a logical way.
+ Components are modular and reusable.

## Suggestions to Make Your Project Stand Out!
+ Add the functionality for creating new users.
+ Add authentication.
+ Add a loading bar.
